/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct SinkInOneOf2 {
                        #[serde(rename = "brokers")]
                        pub brokers: String,
                        /// Password for SASL, if `security_protocol` is `sasl-ssl`.
                        #[serde(rename = "saslPassword", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub sasl_password: Option<Option<String>>,
                        /// Username for SASL, if `security_protocol` is `sasl-ssl`.
                        #[serde(rename = "saslUsername", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub sasl_username: Option<Option<String>>,
                        #[serde(rename = "securityProtocol")]
                        pub security_protocol: models::KafkaSecurityProtocolType,
                        #[serde(rename = "topic")]
                        pub topic: String,
                        #[serde(rename = "type")]
                        pub r#type: Type,
                    }

                    impl SinkInOneOf2 {
                    pub fn new(brokers: String, security_protocol: models::KafkaSecurityProtocolType, topic: String, r#type: Type) -> SinkInOneOf2 {
                SinkInOneOf2 {
                    brokers,
                    sasl_password: None,
                    sasl_username: None,
                    security_protocol,
                    topic,
                    r#type,
                    }
                    }
                    }
                    /// 
                    #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
                    pub enum Type {
                            #[serde(rename = "kafka")]
                        Kafka,
                    }

                    impl Default for Type {
                    fn default() -> Type {
                        Self::Kafka
                    }
                    }


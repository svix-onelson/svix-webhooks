/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct SettingsOut {
                        #[serde(rename = "colorPaletteDark", skip_serializing_if = "Option::is_none")]
                        pub color_palette_dark: Option<Box<models::CustomColorPalette>>,
                        #[serde(rename = "colorPaletteLight", skip_serializing_if = "Option::is_none")]
                        pub color_palette_light: Option<Box<models::CustomColorPalette>>,
                        #[serde(rename = "customBaseFontSize", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub custom_base_font_size: Option<Option<i32>>,
                        #[serde(rename = "customColor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub custom_color: Option<Option<String>>,
                        #[serde(rename = "customFontFamily", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub custom_font_family: Option<Option<String>>,
                        #[serde(rename = "customFontFamilyUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub custom_font_family_url: Option<Option<String>>,
                        #[serde(rename = "customLogoUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub custom_logo_url: Option<Option<String>>,
                        #[serde(rename = "customStringsOverride", skip_serializing_if = "Option::is_none")]
                        pub custom_strings_override: Option<Box<models::CustomStringsOverride>>,
                        #[serde(rename = "customThemeOverride", skip_serializing_if = "Option::is_none")]
                        pub custom_theme_override: Option<Box<models::CustomThemeOverride>>,
                        #[serde(rename = "disableEndpointOnFailure", skip_serializing_if = "Option::is_none")]
                        pub disable_endpoint_on_failure: Option<bool>,
                        #[serde(rename = "displayName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub display_name: Option<Option<String>>,
                        #[serde(rename = "enableChannels", skip_serializing_if = "Option::is_none")]
                        pub enable_channels: Option<bool>,
                        #[serde(rename = "enableIntegrationManagement", skip_serializing_if = "Option::is_none")]
                        pub enable_integration_management: Option<bool>,
                        #[serde(rename = "enableTransformations", skip_serializing_if = "Option::is_none")]
                        pub enable_transformations: Option<bool>,
                        #[serde(rename = "enforceHttps", skip_serializing_if = "Option::is_none")]
                        pub enforce_https: Option<bool>,
                        #[serde(rename = "eventCatalogPublished", skip_serializing_if = "Option::is_none")]
                        pub event_catalog_published: Option<bool>,
                        #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
                        pub read_only: Option<bool>,
                        #[serde(rename = "showUseSvixPlay", skip_serializing_if = "Option::is_none")]
                        pub show_use_svix_play: Option<bool>,
                        #[serde(rename = "wipeSuccessfulPayload", skip_serializing_if = "Option::is_none")]
                        pub wipe_successful_payload: Option<bool>,
                    }

                    impl SettingsOut {
                    pub fn new() -> SettingsOut {
                SettingsOut {
                    color_palette_dark: None,
                    color_palette_light: None,
                    custom_base_font_size: None,
                    custom_color: None,
                    custom_font_family: None,
                    custom_font_family_url: None,
                    custom_logo_url: None,
                    custom_strings_override: None,
                    custom_theme_override: None,
                    disable_endpoint_on_failure: None,
                    display_name: None,
                    enable_channels: None,
                    enable_integration_management: None,
                    enable_transformations: None,
                    enforce_https: None,
                    event_catalog_published: None,
                    read_only: None,
                    show_use_svix_play: None,
                    wipe_successful_payload: None,
                    }
                    }
                    }


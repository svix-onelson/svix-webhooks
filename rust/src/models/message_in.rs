/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct MessageIn {
                        #[serde(rename = "application", skip_serializing_if = "Option::is_none")]
                        pub application: Option<Box<models::ApplicationIn>>,
                        /// List of free-form identifiers that endpoints can filter by
                        #[serde(rename = "channels", skip_serializing_if = "Option::is_none")]
                        pub channels: Option<Vec<String>>,
                        /// Optional unique identifier for the message
                        #[serde(rename = "eventId", skip_serializing_if = "Option::is_none")]
                        pub event_id: Option<String>,
                        /// The event type's name
                        #[serde(rename = "eventType")]
                        pub event_type: String,
                        /// JSON payload to send as the request body of the webhook.  We also support sending non-JSON payloads. Please contact us for more information.
                        #[serde(rename = "payload")]
                        pub payload: serde_json::Value,
                        /// Optional number of hours to retain the message payload. Note that this is mutually exclusive with `payloadRetentionPeriod`.
                        #[serde(rename = "payloadRetentionHours", skip_serializing_if = "Option::is_none")]
                        pub payload_retention_hours: Option<i64>,
                        /// Optional number of days to retain the message payload. Defaults to 90. Note that this is mutually exclusive with `payloadRetentionHours`.
                        #[serde(rename = "payloadRetentionPeriod", skip_serializing_if = "Option::is_none")]
                        pub payload_retention_period: Option<i64>,
                        /// List of free-form tags that can be filtered by when listing messages
                        #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
                        pub tags: Option<Vec<String>>,
                        /// Extra parameters to pass to Transformations (for future use)
                        #[serde(rename = "transformationsParams", skip_serializing_if = "Option::is_none")]
                        pub transformations_params: Option<serde_json::Value>,
                    }

                    impl MessageIn {
                    pub fn new(event_type: String, payload: serde_json::Value) -> MessageIn {
                MessageIn {
                    application: None,
                    channels: None,
                    event_id: None,
                    event_type,
                    payload,
                    payload_retention_hours: None,
                    payload_retention_period: None,
                    tags: None,
                    transformations_params: None,
                    }
                    }
                    }


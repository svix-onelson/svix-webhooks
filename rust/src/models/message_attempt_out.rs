/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct MessageAttemptOut {
                        /// The ep's ID
                        #[serde(rename = "endpointId")]
                        pub endpoint_id: String,
                        /// The attempt's ID
                        #[serde(rename = "id")]
                        pub id: String,
                        #[serde(rename = "msg", skip_serializing_if = "Option::is_none")]
                        pub msg: Option<Box<models::MessageOut>>,
                        /// The msg's ID
                        #[serde(rename = "msgId")]
                        pub msg_id: String,
                        #[serde(rename = "response")]
                        pub response: String,
                        /// Response duration in milliseconds.
                        #[serde(rename = "responseDurationMs")]
                        pub response_duration_ms: i64,
                        #[serde(rename = "responseStatusCode")]
                        pub response_status_code: i32,
                        #[serde(rename = "status")]
                        pub status: models::MessageStatus,
                        #[serde(rename = "timestamp")]
                        pub timestamp: String,
                        #[serde(rename = "triggerType")]
                        pub trigger_type: models::MessageAttemptTriggerType,
                        #[serde(rename = "url")]
                        pub url: String,
                    }

                    impl MessageAttemptOut {
                    pub fn new(endpoint_id: String, id: String, msg_id: String, response: String, response_duration_ms: i64, response_status_code: i32, status: models::MessageStatus, timestamp: String, trigger_type: models::MessageAttemptTriggerType, url: String) -> MessageAttemptOut {
                MessageAttemptOut {
                    endpoint_id,
                    id,
                    msg: None,
                    msg_id,
                    response,
                    response_duration_ms,
                    response_status_code,
                    status,
                    timestamp,
                    trigger_type,
                    url,
                    }
                    }
                    }


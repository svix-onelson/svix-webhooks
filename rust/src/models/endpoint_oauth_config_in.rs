/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct EndpointOauthConfigIn {
                        #[serde(rename = "authMethod")]
                        pub auth_method: models::Oauth2AuthMethodIn,
                        /// The client ID. Required for all authentication types.
                        #[serde(rename = "clientId")]
                        pub client_id: String,
                        /// Optional client secret. This is only used for `clientSecretBasic` and `clientSecretPost`.  For `clientSecretBasic`, the secret will be appended to the `Authorization` header. For `clientSecretPost`, this will be added to the body in a `client_secret` parameter.
                        #[serde(rename = "clientSecret", skip_serializing_if = "Option::is_none")]
                        pub client_secret: Option<String>,
                        /// Extra parameters added to the request body as key-value pairs.
                        #[serde(rename = "extraParams", skip_serializing_if = "Option::is_none")]
                        pub extra_params: Option<std::collections::HashMap<String, String>>,
                        #[serde(rename = "grantType")]
                        pub grant_type: models::Oauth2GrantTypeIn,
                        #[serde(rename = "jwtParams", skip_serializing_if = "Option::is_none")]
                        pub jwt_params: Option<Box<models::ClientSecretJwtParamsIn>>,
                        /// For `refreshToken` grant type.
                        #[serde(rename = "refreshToken", skip_serializing_if = "Option::is_none")]
                        pub refresh_token: Option<String>,
                        /// Optional OAuth scopes added to the request body.
                        #[serde(rename = "scopes", skip_serializing_if = "Option::is_none")]
                        pub scopes: Option<Vec<String>>,
                        /// The URL of the authorization server.
                        #[serde(rename = "tokenUrl")]
                        pub token_url: String,
                    }

                    impl EndpointOauthConfigIn {
                    pub fn new(auth_method: models::Oauth2AuthMethodIn, client_id: String, grant_type: models::Oauth2GrantTypeIn, token_url: String) -> EndpointOauthConfigIn {
                EndpointOauthConfigIn {
                    auth_method,
                    client_id,
                    client_secret: None,
                    extra_params: None,
                    grant_type,
                    jwt_params: None,
                    refresh_token: None,
                    scopes: None,
                    token_url,
                    }
                    }
                    }


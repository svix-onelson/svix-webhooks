/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct EndpointPatch {
                        #[serde(rename = "channels", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub channels: Option<Option<Vec<String>>>,
                        #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
                        pub description: Option<String>,
                        #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
                        pub disabled: Option<bool>,
                        #[serde(rename = "filterTypes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub filter_types: Option<Option<Vec<String>>>,
                        #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
                        pub metadata: Option<std::collections::HashMap<String, String>>,
                        #[serde(rename = "rateLimit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub rate_limit: Option<Option<i32>>,
                        /// The endpoint's verification secret.  Format: `base64` encoded random bytes optionally prefixed with `whsec_`. It is recommended to not set this and let the server generate the secret.
                        #[serde(rename = "secret", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub secret: Option<Option<String>>,
                        /// The ep's UID
                        #[serde(rename = "uid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
                        pub uid: Option<Option<String>>,
                        #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
                        pub url: Option<String>,
                        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
                        pub version: Option<i32>,
                    }

                    impl EndpointPatch {
                    pub fn new() -> EndpointPatch {
                EndpointPatch {
                    channels: None,
                    description: None,
                    disabled: None,
                    filter_types: None,
                    metadata: None,
                    rate_limit: None,
                    secret: None,
                    uid: None,
                    url: None,
                    version: None,
                    }
                    }
                    }


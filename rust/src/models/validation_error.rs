/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
            /// ValidationError : Validation errors have their own schema to provide context for invalid requests eg. mismatched types and out of bounds values. There may be any number of these per 422 UNPROCESSABLE ENTITY error.
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct ValidationError {
                        /// The location as a [`Vec`] of [`String`]s -- often in the form `[\"body\", \"field_name\"]`, `[\"query\", \"field_name\"]`, etc. They may, however, be arbitrarily deep.
                        #[serde(rename = "loc")]
                        pub loc: Vec<String>,
                        /// The message accompanying the validation error item.
                        #[serde(rename = "msg")]
                        pub msg: String,
                        /// The type of error, often \"type_error\" or \"value_error\", but sometimes with more context like as \"value_error.number.not_ge\"
                        #[serde(rename = "type")]
                        pub r#type: String,
                    }

                    impl ValidationError {
                        /// Validation errors have their own schema to provide context for invalid requests eg. mismatched types and out of bounds values. There may be any number of these per 422 UNPROCESSABLE ENTITY error.
                    pub fn new(loc: Vec<String>, msg: String, r#type: String) -> ValidationError {
                ValidationError {
                    loc,
                    msg,
                    r#type,
                    }
                    }
                    }


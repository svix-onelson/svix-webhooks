/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
            /// MessageAttemptFailingEventData : Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct MessageAttemptFailingEventData {
                        /// The app's ID
                        #[serde(rename = "appId")]
                        pub app_id: String,
                        /// The app's UID
                        #[serde(rename = "appUid", skip_serializing_if = "Option::is_none")]
                        pub app_uid: Option<String>,
                        /// The ep's ID
                        #[serde(rename = "endpointId")]
                        pub endpoint_id: String,
                        #[serde(rename = "lastAttempt")]
                        pub last_attempt: Box<models::MessageAttemptFailedData>,
                        /// The msg's UID
                        #[serde(rename = "msgEventId", skip_serializing_if = "Option::is_none")]
                        pub msg_event_id: Option<String>,
                        /// The msg's ID
                        #[serde(rename = "msgId")]
                        pub msg_id: String,
                    }

                    impl MessageAttemptFailingEventData {
                        /// Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.
                    pub fn new(app_id: String, endpoint_id: String, last_attempt: models::MessageAttemptFailedData, msg_id: String) -> MessageAttemptFailingEventData {
                MessageAttemptFailingEventData {
                    app_id,
                    app_uid: None,
                    endpoint_id,
                    last_attempt: Box::new(last_attempt),
                    msg_event_id: None,
                    msg_id,
                    }
                    }
                    }


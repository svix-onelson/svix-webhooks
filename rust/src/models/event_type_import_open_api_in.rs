/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
            /// EventTypeImportOpenApiIn : Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct EventTypeImportOpenApiIn {
                        /// If `true`, return the event types that would be modified without actually modifying them.
                        #[serde(rename = "dry_run", skip_serializing_if = "Option::is_none")]
                        pub dry_run: Option<bool>,
                        /// A pre-parsed JSON spec.
                        #[serde(rename = "spec", skip_serializing_if = "Option::is_none")]
                        pub spec: Option<serde_json::Value>,
                        /// A string, parsed by the server as YAML or JSON.
                        #[serde(rename = "specRaw", skip_serializing_if = "Option::is_none")]
                        pub spec_raw: Option<String>,
                    }

                    impl EventTypeImportOpenApiIn {
                        /// Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.
                    pub fn new() -> EventTypeImportOpenApiIn {
                EventTypeImportOpenApiIn {
                    dry_run: None,
                    spec: None,
                    spec_raw: None,
                    }
                    }
                    }


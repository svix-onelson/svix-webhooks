/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
        
            /// EndpointMessageOut : A model containing information on a given message plus additional fields on the last attempt for that message.
                #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
                pub struct EndpointMessageOut {
                        /// List of free-form identifiers that endpoints can filter by
                        #[serde(rename = "channels", skip_serializing_if = "Option::is_none")]
                        pub channels: Option<Vec<String>>,
                        /// Optional unique identifier for the message
                        #[serde(rename = "eventId", skip_serializing_if = "Option::is_none")]
                        pub event_id: Option<String>,
                        /// The event type's name
                        #[serde(rename = "eventType")]
                        pub event_type: String,
                        /// The msg's ID
                        #[serde(rename = "id")]
                        pub id: String,
                        #[serde(rename = "nextAttempt", skip_serializing_if = "Option::is_none")]
                        pub next_attempt: Option<String>,
                        #[serde(rename = "payload")]
                        pub payload: serde_json::Value,
                        #[serde(rename = "status")]
                        pub status: models::MessageStatus,
                        #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
                        pub tags: Option<Vec<String>>,
                        #[serde(rename = "timestamp")]
                        pub timestamp: String,
                    }

                    impl EndpointMessageOut {
                        /// A model containing information on a given message plus additional fields on the last attempt for that message.
                    pub fn new(event_type: String, id: String, payload: serde_json::Value, status: models::MessageStatus, timestamp: String) -> EndpointMessageOut {
                EndpointMessageOut {
                    channels: None,
                    event_id: None,
                    event_type,
                    id,
                    next_attempt: None,
                    payload,
                    status,
                    tags: None,
                    timestamp,
                    }
                    }
                    }


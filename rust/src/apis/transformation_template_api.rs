/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use crate::Configuration;
use crate::models;
use crate::error::Error;
#[allow(unused_imports)]
use crate::models::*;

/// struct for passing parameters to the method [`v1_period_endpoint_period_update_hubspot_oauth_config`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodUpdateHubspotOauthConfigParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub hubspot_oauth_config_in: models::HubspotOauthConfigIn
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_create`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodCreateParams {
    pub template_in: models::TemplateIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_delete`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodDeleteParams {
    pub transformation_template_id: String
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_generate`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodGenerateParams {
    pub generate_in: models::GenerateIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_get`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodGetParams {
    pub transformation_template_id: String
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_list`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodListParams {
    /// Limit the number of returned items
    pub limit: Option<i32>,
    /// The iterator returned from a prior invocation
    pub iterator: Option<String>,
    /// The sorting order of the returned items
    pub order: Option<Ordering>
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_oauth_period_discord`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodOauthPeriodDiscordParams {
    pub o_auth_payload_in: models::OAuthPayloadIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_oauth_period_hubspot`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodOauthPeriodHubspotParams {
    pub o_auth_payload_in: models::OAuthPayloadIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_oauth_period_slack`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodOauthPeriodSlackParams {
    pub o_auth_payload_in: models::OAuthPayloadIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_patch`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodPatchParams {
    pub transformation_template_id: String,
    pub template_patch: models::TemplatePatch
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_simulate`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodSimulateParams {
    pub transformation_simulate_in: models::TransformationSimulateIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_transformation_template_period_update`]
#[derive(Clone, Debug)]
pub struct V1PeriodTransformationTemplatePeriodUpdateParams {
    pub transformation_template_id: String,
    pub template_update: models::TemplateUpdate
}


/// struct for typed errors of method [`v1_period_endpoint_period_update_hubspot_oauth_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodUpdateHubspotOauthConfigError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodCreateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodDeleteError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_generate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodGenerateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodGetError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodListError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_oauth_period_discord`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodOauthPeriodDiscordError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_oauth_period_hubspot`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodOauthPeriodHubspotError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_oauth_period_slack`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodOauthPeriodSlackError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodPatchError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_simulate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodSimulateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_transformation_template_period_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodTransformationTemplatePeriodUpdateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}


/// Create/update endpoint Hubspot OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.
pub async fn v1_period_endpoint_period_update_hubspot_oauth_config(configuration: &Configuration, params: V1PeriodEndpointPeriodUpdateHubspotOauthConfigParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let hubspot_oauth_config_in = params.hubspot_oauth_config_in;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PUT, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation-template/oauth/hubspot".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.with_body_param(hubspot_oauth_config_in);
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Create a new transformation template.
pub async fn v1_period_transformation_template_period_create(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodCreateParams) -> Result<models::TemplateOut, Error> {
    // unbox the parameters
    let template_in = params.template_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/transformation-template".to_string())
    ;
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(template_in);

    req.execute(configuration).await
}

/// Delete a transformation template.
pub async fn v1_period_transformation_template_period_delete(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodDeleteParams) -> Result<(), Error> {
    // unbox the parameters
    let transformation_template_id = params.transformation_template_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::DELETE, "/api/v1/transformation-template/{transformation_template_id}".to_string())
    ;
    req = req.with_path_param("transformation_template_id".to_string(), transformation_template_id.to_string());
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Use OpenAI's Completion API to generate code for a transformation template.
pub async fn v1_period_transformation_template_period_generate(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodGenerateParams) -> Result<models::GenerateOut, Error> {
    // unbox the parameters
    let generate_in = params.generate_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/transformation-template/generate".to_string())
    ;
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(generate_in);

    req.execute(configuration).await
}

/// Get a transformation template.
pub async fn v1_period_transformation_template_period_get(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodGetParams) -> Result<models::TemplateOut, Error> {
    // unbox the parameters
    let transformation_template_id = params.transformation_template_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/transformation-template/{transformation_template_id}".to_string())
    ;
    req = req.with_path_param("transformation_template_id".to_string(), transformation_template_id.to_string());

    req.execute(configuration).await
}

/// List all transformation templates for an application.
pub async fn v1_period_transformation_template_period_list(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodListParams) -> Result<models::ListResponseTemplateOut, Error> {
    // unbox the parameters
    let limit = params.limit;
    let iterator = params.iterator;
    let order = params.order;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/transformation-template".to_string())
    ;
    if let Some(ref s) = limit {
        let query_value = s.to_string();
        req = req.with_query_param("limit".to_string(), query_value);
    }
    if let Some(ref s) = iterator {
        let query_value = s.to_string();
        req = req.with_query_param("iterator".to_string(), query_value);
    }
    if let Some(ref s) = order {
        let query_value = s.to_string();
        req = req.with_query_param("order".to_string(), query_value);
    }

    req.execute(configuration).await
}

/// Get Discord Incoming webhook URL.
pub async fn v1_period_transformation_template_period_oauth_period_discord(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodOauthPeriodDiscordParams) -> Result<models::IncomingWebhookPayloadOut, Error> {
    // unbox the parameters
    let o_auth_payload_in = params.o_auth_payload_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/transformation-template/oauth/discord".to_string())
    ;
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(o_auth_payload_in);

    req.execute(configuration).await
}

/// Get Hubspot access token using authorization code.
pub async fn v1_period_transformation_template_period_oauth_period_hubspot(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodOauthPeriodHubspotParams) -> Result<models::OAuthPayloadOut, Error> {
    // unbox the parameters
    let o_auth_payload_in = params.o_auth_payload_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/transformation-template/oauth/hubspot".to_string())
    ;
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(o_auth_payload_in);

    req.execute(configuration).await
}

/// Get Slack Incoming webhook URL.
pub async fn v1_period_transformation_template_period_oauth_period_slack(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodOauthPeriodSlackParams) -> Result<models::IncomingWebhookPayloadOut, Error> {
    // unbox the parameters
    let o_auth_payload_in = params.o_auth_payload_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/transformation-template/oauth/slack".to_string())
    ;
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(o_auth_payload_in);

    req.execute(configuration).await
}

/// Partially update a transformation template.
pub async fn v1_period_transformation_template_period_patch(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodPatchParams) -> Result<models::TemplateOut, Error> {
    // unbox the parameters
    let transformation_template_id = params.transformation_template_id;
    let template_patch = params.template_patch;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PATCH, "/api/v1/transformation-template/{transformation_template_id}".to_string())
    ;
    req = req.with_path_param("transformation_template_id".to_string(), transformation_template_id.to_string());
    req = req.with_body_param(template_patch);

    req.execute(configuration).await
}

/// Simulate running the transformation on the payload and code.
pub async fn v1_period_transformation_template_period_simulate(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodSimulateParams) -> Result<models::TransformationSimulateOut, Error> {
    // unbox the parameters
    let transformation_simulate_in = params.transformation_simulate_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/transformation-template/simulate".to_string())
    ;
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(transformation_simulate_in);

    req.execute(configuration).await
}

/// Update a transformation template.
pub async fn v1_period_transformation_template_period_update(configuration: &Configuration, params: V1PeriodTransformationTemplatePeriodUpdateParams) -> Result<models::TemplateOut, Error> {
    // unbox the parameters
    let transformation_template_id = params.transformation_template_id;
    let template_update = params.template_update;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PUT, "/api/v1/transformation-template/{transformation_template_id}".to_string())
    ;
    req = req.with_path_param("transformation_template_id".to_string(), transformation_template_id.to_string());
    req = req.with_body_param(template_update);

    req.execute(configuration).await
}


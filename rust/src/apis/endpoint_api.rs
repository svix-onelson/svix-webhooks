/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use crate::Configuration;
use crate::models;
use crate::error::Error;
#[allow(unused_imports)]
use crate::models::*;

/// struct for passing parameters to the method [`v1_period_endpoint_period_create`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodCreateParams {
    /// The app's ID or UID
    pub app_id: String,
    pub endpoint_in: models::EndpointIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_delete`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodDeleteParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_delete_mtls_config`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodDeleteMtlsConfigParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_delete_oauth_config`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodDeleteOauthConfigParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_get`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodGetParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_get_headers`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodGetHeadersParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_get_secret`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodGetSecretParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_get_stats`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodGetStatsParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    /// Filter the range to data starting from this date.
    pub since: Option<String>,
    /// Filter the range to data ending by this date.
    pub until: Option<String>
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_list`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodListParams {
    /// The app's ID or UID
    pub app_id: String,
    /// Limit the number of returned items
    pub limit: Option<i32>,
    /// The iterator returned from a prior invocation
    pub iterator: Option<String>,
    /// The sorting order of the returned items
    pub order: Option<Ordering>
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_patch`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodPatchParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub endpoint_patch: models::EndpointPatch
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_patch_headers`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodPatchHeadersParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub endpoint_headers_patch_in: models::EndpointHeadersPatchIn
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_recover`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodRecoverParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub recover_in: models::RecoverIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_replay_missing`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodReplayMissingParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub replay_in: models::ReplayIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_rotate_secret`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodRotateSecretParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub endpoint_secret_rotate_in: models::EndpointSecretRotateIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_send_example`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodSendExampleParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub event_example_in: models::EventExampleIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_transformation_get`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodTransformationGetParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_transformation_partial_update`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodTransformationPartialUpdateParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub endpoint_transformation_in: models::EndpointTransformationIn
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_transformation_simulate`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodTransformationSimulateParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub endpoint_transformation_simulate_in: models::EndpointTransformationSimulateIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_update`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodUpdateParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub endpoint_update: models::EndpointUpdate
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_update_headers`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodUpdateHeadersParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub endpoint_headers_in: models::EndpointHeadersIn
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_update_mtls_config`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodUpdateMtlsConfigParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub endpoint_mtls_config_in: models::EndpointMtlsConfigIn
}

/// struct for passing parameters to the method [`v1_period_endpoint_period_update_oauth_config`]
#[derive(Clone, Debug)]
pub struct V1PeriodEndpointPeriodUpdateOauthConfigParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    pub endpoint_oauth_config_in: models::EndpointOauthConfigIn
}

/// struct for passing parameters to the method [`v1_period_sink_period_create`]
#[derive(Clone, Debug)]
pub struct V1PeriodSinkPeriodCreateParams {
    /// The app's ID or UID
    pub app_id: String,
    pub sink_in: models::SinkIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_sink_period_get`]
#[derive(Clone, Debug)]
pub struct V1PeriodSinkPeriodGetParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub sink_id: String
}

/// struct for passing parameters to the method [`v1_period_sink_period_list`]
#[derive(Clone, Debug)]
pub struct V1PeriodSinkPeriodListParams {
    /// The app's ID or UID
    pub app_id: String,
    /// Limit the number of returned items
    pub limit: Option<i32>,
    /// The iterator returned from a prior invocation
    pub iterator: Option<String>,
    /// The sorting order of the returned items
    pub order: Option<Ordering>
}


/// struct for typed errors of method [`v1_period_endpoint_period_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodCreateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodDeleteError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_delete_mtls_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodDeleteMtlsConfigError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_delete_oauth_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodDeleteOauthConfigError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodGetError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_get_headers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodGetHeadersError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_get_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodGetSecretError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_get_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodGetStatsError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodListError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodPatchError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_patch_headers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodPatchHeadersError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_recover`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodRecoverError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_replay_missing`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodReplayMissingError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_rotate_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodRotateSecretError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_send_example`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodSendExampleError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_transformation_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodTransformationGetError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_transformation_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodTransformationPartialUpdateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_transformation_simulate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodTransformationSimulateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodUpdateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_update_headers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodUpdateHeadersError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_update_mtls_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodUpdateMtlsConfigError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_endpoint_period_update_oauth_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodEndpointPeriodUpdateOauthConfigError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_sink_period_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodSinkPeriodCreateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_sink_period_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodSinkPeriodGetError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_sink_period_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodSinkPeriodListError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}


/// Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended).
pub async fn v1_period_endpoint_period_create(configuration: &Configuration, params: V1PeriodEndpointPeriodCreateParams) -> Result<models::EndpointOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_in = params.endpoint_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/app/{app_id}/endpoint".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(endpoint_in);

    req.execute(configuration).await
}

/// Delete an endpoint.
pub async fn v1_period_endpoint_period_delete(configuration: &Configuration, params: V1PeriodEndpointPeriodDeleteParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::DELETE, "/api/v1/app/{app_id}/endpoint/{endpoint_id}".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Delete endpoint mTLS configuration.
pub async fn v1_period_endpoint_period_delete_mtls_config(configuration: &Configuration, params: V1PeriodEndpointPeriodDeleteMtlsConfigParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::DELETE, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Delete endpoint OAuth configuration.
pub async fn v1_period_endpoint_period_delete_oauth_config(configuration: &Configuration, params: V1PeriodEndpointPeriodDeleteOauthConfigParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::DELETE, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Get an endpoint.
pub async fn v1_period_endpoint_period_get(configuration: &Configuration, params: V1PeriodEndpointPeriodGetParams) -> Result<models::EndpointOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/endpoint/{endpoint_id}".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());

    req.execute(configuration).await
}

/// Get the additional headers to be sent with the webhook.
pub async fn v1_period_endpoint_period_get_headers(configuration: &Configuration, params: V1PeriodEndpointPeriodGetHeadersParams) -> Result<models::EndpointHeadersOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());

    req.execute(configuration).await
}

/// Get the endpoint's signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
pub async fn v1_period_endpoint_period_get_secret(configuration: &Configuration, params: V1PeriodEndpointPeriodGetSecretParams) -> Result<models::EndpointSecretOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());

    req.execute(configuration).await
}

/// Get basic statistics for the endpoint.
pub async fn v1_period_endpoint_period_get_stats(configuration: &Configuration, params: V1PeriodEndpointPeriodGetStatsParams) -> Result<models::EndpointStats, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let since = params.since;
    let until = params.until;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats".to_string())
    ;
    if let Some(ref s) = since {
        let query_value = s.to_string();
        req = req.with_query_param("since".to_string(), query_value);
    }
    if let Some(ref s) = until {
        let query_value = s.to_string();
        req = req.with_query_param("until".to_string(), query_value);
    }
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());

    req.execute(configuration).await
}

/// List the application's endpoints.
pub async fn v1_period_endpoint_period_list(configuration: &Configuration, params: V1PeriodEndpointPeriodListParams) -> Result<models::ListResponseEndpointOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let limit = params.limit;
    let iterator = params.iterator;
    let order = params.order;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/endpoint".to_string())
    ;
    if let Some(ref s) = limit {
        let query_value = s.to_string();
        req = req.with_query_param("limit".to_string(), query_value);
    }
    if let Some(ref s) = iterator {
        let query_value = s.to_string();
        req = req.with_query_param("iterator".to_string(), query_value);
    }
    if let Some(ref s) = order {
        let query_value = s.to_string();
        req = req.with_query_param("order".to_string(), query_value);
    }
    req = req.with_path_param("app_id".to_string(), app_id.to_string());

    req.execute(configuration).await
}

/// Partially update an endpoint.
pub async fn v1_period_endpoint_period_patch(configuration: &Configuration, params: V1PeriodEndpointPeriodPatchParams) -> Result<models::EndpointOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let endpoint_patch = params.endpoint_patch;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PATCH, "/api/v1/app/{app_id}/endpoint/{endpoint_id}".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.with_body_param(endpoint_patch);

    req.execute(configuration).await
}

/// Partially set the additional headers to be sent with the webhook.
pub async fn v1_period_endpoint_period_patch_headers(configuration: &Configuration, params: V1PeriodEndpointPeriodPatchHeadersParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let endpoint_headers_patch_in = params.endpoint_headers_patch_in;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PATCH, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.with_body_param(endpoint_headers_patch_in);
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Resend all failed messages since a given time.  Messages that were sent successfully, even if failed initially, are not resent.
pub async fn v1_period_endpoint_period_recover(configuration: &Configuration, params: V1PeriodEndpointPeriodRecoverParams) -> Result<models::RecoverOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let recover_in = params.recover_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(recover_in);

    req.execute(configuration).await
}

/// Replays messages to the endpoint.  Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.
pub async fn v1_period_endpoint_period_replay_missing(configuration: &Configuration, params: V1PeriodEndpointPeriodReplayMissingParams) -> Result<models::ReplayOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let replay_in = params.replay_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(replay_in);

    req.execute(configuration).await
}

/// Rotates the endpoint's signing secret.  The previous secret will remain valid for the next 24 hours.
pub async fn v1_period_endpoint_period_rotate_secret(configuration: &Configuration, params: V1PeriodEndpointPeriodRotateSecretParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let endpoint_secret_rotate_in = params.endpoint_secret_rotate_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(endpoint_secret_rotate_in);
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Send an example message for an event.
pub async fn v1_period_endpoint_period_send_example(configuration: &Configuration, params: V1PeriodEndpointPeriodSendExampleParams) -> Result<models::MessageOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let event_example_in = params.event_example_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(event_example_in);

    req.execute(configuration).await
}

/// Get the transformation code associated with this endpoint.
pub async fn v1_period_endpoint_period_transformation_get(configuration: &Configuration, params: V1PeriodEndpointPeriodTransformationGetParams) -> Result<models::EndpointTransformationOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());

    req.execute(configuration).await
}

/// Set or unset the transformation code associated with this endpoint.
pub async fn v1_period_endpoint_period_transformation_partial_update(configuration: &Configuration, params: V1PeriodEndpointPeriodTransformationPartialUpdateParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let endpoint_transformation_in = params.endpoint_transformation_in;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PATCH, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.with_body_param(endpoint_transformation_in);
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Simulate running the transformation on the payload and code.
pub async fn v1_period_endpoint_period_transformation_simulate(configuration: &Configuration, params: V1PeriodEndpointPeriodTransformationSimulateParams) -> Result<models::EndpointTransformationSimulateOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let endpoint_transformation_simulate_in = params.endpoint_transformation_simulate_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(endpoint_transformation_simulate_in);

    req.execute(configuration).await
}

/// Update an endpoint.
pub async fn v1_period_endpoint_period_update(configuration: &Configuration, params: V1PeriodEndpointPeriodUpdateParams) -> Result<models::EndpointOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let endpoint_update = params.endpoint_update;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PUT, "/api/v1/app/{app_id}/endpoint/{endpoint_id}".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.with_body_param(endpoint_update);

    req.execute(configuration).await
}

/// Set the additional headers to be sent with the webhook.
pub async fn v1_period_endpoint_period_update_headers(configuration: &Configuration, params: V1PeriodEndpointPeriodUpdateHeadersParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let endpoint_headers_in = params.endpoint_headers_in;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PUT, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.with_body_param(endpoint_headers_in);
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Create/update endpoint mTLS configuration.
pub async fn v1_period_endpoint_period_update_mtls_config(configuration: &Configuration, params: V1PeriodEndpointPeriodUpdateMtlsConfigParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let endpoint_mtls_config_in = params.endpoint_mtls_config_in;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PUT, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.with_body_param(endpoint_mtls_config_in);
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Create/update endpoint OAuth configuration.
pub async fn v1_period_endpoint_period_update_oauth_config(configuration: &Configuration, params: V1PeriodEndpointPeriodUpdateOauthConfigParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let endpoint_oauth_config_in = params.endpoint_oauth_config_in;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PUT, "/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());
    req = req.with_body_param(endpoint_oauth_config_in);
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Create a new sink for the application.
pub async fn v1_period_sink_period_create(configuration: &Configuration, params: V1PeriodSinkPeriodCreateParams) -> Result<models::SinkOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let sink_in = params.sink_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/app/{app_id}/sink".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(sink_in);

    req.execute(configuration).await
}

/// Get a sink.
pub async fn v1_period_sink_period_get(configuration: &Configuration, params: V1PeriodSinkPeriodGetParams) -> Result<models::SinkOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let sink_id = params.sink_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/sink/{sink_id}".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("sink_id".to_string(), sink_id.to_string());

    req.execute(configuration).await
}

/// List the application's sinks.
pub async fn v1_period_sink_period_list(configuration: &Configuration, params: V1PeriodSinkPeriodListParams) -> Result<models::ListResponseSinkOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let limit = params.limit;
    let iterator = params.iterator;
    let order = params.order;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/sink".to_string())
    ;
    if let Some(ref s) = limit {
        let query_value = s.to_string();
        req = req.with_query_param("limit".to_string(), query_value);
    }
    if let Some(ref s) = iterator {
        let query_value = s.to_string();
        req = req.with_query_param("iterator".to_string(), query_value);
    }
    if let Some(ref s) = order {
        let query_value = s.to_string();
        req = req.with_query_param("order".to_string(), query_value);
    }
    req = req.with_path_param("app_id".to_string(), app_id.to_string());

    req.execute(configuration).await
}


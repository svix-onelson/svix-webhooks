/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use crate::Configuration;
use crate::models;
use crate::error::Error;
#[allow(unused_imports)]
use crate::models::*;

/// struct for passing parameters to the method [`create_broadcast_message`]
#[derive(Clone, Debug)]
pub struct CreateBroadcastMessageParams {
    pub message_broadcast_in: models::MessageBroadcastIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}


/// struct for typed errors of method [`create_broadcast_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateBroadcastMessageError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}


/// Creates a background task to send the same message to each application in your organization.
pub async fn create_broadcast_message(configuration: &Configuration, params: CreateBroadcastMessageParams) -> Result<models::MessageBroadcastOut, Error> {
    // unbox the parameters
    let message_broadcast_in = params.message_broadcast_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/msg/broadcast".to_string())
    ;
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(message_broadcast_in);

    req.execute(configuration).await
}


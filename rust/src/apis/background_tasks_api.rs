/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use crate::Configuration;
use crate::models;
use crate::error::Error;
#[allow(unused_imports)]
use crate::models::*;

/// struct for passing parameters to the method [`get_background_task`]
#[derive(Clone, Debug)]
pub struct GetBackgroundTaskParams {
    pub task_id: String
}

/// struct for passing parameters to the method [`list_background_tasks`]
#[derive(Clone, Debug)]
pub struct ListBackgroundTasksParams {
    /// Filter the response based on the status.
    pub status: Option<BackgroundTaskStatus>,
    /// Filter the response based on the type.
    pub task: Option<BackgroundTaskType>,
    /// Limit the number of returned items
    pub limit: Option<i32>,
    /// The iterator returned from a prior invocation
    pub iterator: Option<String>,
    /// The sorting order of the returned items
    pub order: Option<Ordering>
}


/// struct for typed errors of method [`get_background_task`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBackgroundTaskError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_background_tasks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListBackgroundTasksError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}


/// Get a background task by ID.
pub async fn get_background_task(configuration: &Configuration, params: GetBackgroundTaskParams) -> Result<models::BackgroundTaskOut, Error> {
    // unbox the parameters
    let task_id = params.task_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/background-task/{task_id}".to_string())
    ;
    req = req.with_path_param("task_id".to_string(), task_id.to_string());

    req.execute(configuration).await
}

/// List background tasks executed in the past 90 days.
pub async fn list_background_tasks(configuration: &Configuration, params: ListBackgroundTasksParams) -> Result<models::ListResponseBackgroundTaskOut, Error> {
    // unbox the parameters
    let status = params.status;
    let task = params.task;
    let limit = params.limit;
    let iterator = params.iterator;
    let order = params.order;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/background-task".to_string())
    ;
    if let Some(ref s) = status {
        let query_value = s.to_string();
        req = req.with_query_param("status".to_string(), query_value);
    }
    if let Some(ref s) = task {
        let query_value = s.to_string();
        req = req.with_query_param("task".to_string(), query_value);
    }
    if let Some(ref s) = limit {
        let query_value = s.to_string();
        req = req.with_query_param("limit".to_string(), query_value);
    }
    if let Some(ref s) = iterator {
        let query_value = s.to_string();
        req = req.with_query_param("iterator".to_string(), query_value);
    }
    if let Some(ref s) = order {
        let query_value = s.to_string();
        req = req.with_query_param("order".to_string(), query_value);
    }

    req.execute(configuration).await
}


/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use crate::Configuration;
use crate::models;
use crate::error::Error;
#[allow(unused_imports)]
use crate::models::*;

/// struct for passing parameters to the method [`v1_period_stream_period_create`]
#[derive(Clone, Debug)]
pub struct V1PeriodStreamPeriodCreateParams {
    pub stream_in: models::StreamIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_stream_period_create_events`]
#[derive(Clone, Debug)]
pub struct V1PeriodStreamPeriodCreateEventsParams {
    pub stream_id: String,
    pub create_stream_in: models::CreateStreamIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_stream_period_delete`]
#[derive(Clone, Debug)]
pub struct V1PeriodStreamPeriodDeleteParams {
    pub stream_id: String
}

/// struct for passing parameters to the method [`v1_period_stream_period_events_get`]
#[derive(Clone, Debug)]
pub struct V1PeriodStreamPeriodEventsGetParams {
    pub stream_id: String,
    /// Limit the number of returned items
    pub limit: Option<i32>,
    /// The iterator returned from a prior invocation
    pub iterator: Option<String>,
    pub after: Option<String>
}

/// struct for passing parameters to the method [`v1_period_stream_period_get`]
#[derive(Clone, Debug)]
pub struct V1PeriodStreamPeriodGetParams {
    pub stream_id: String
}

/// struct for passing parameters to the method [`v1_period_stream_period_list`]
#[derive(Clone, Debug)]
pub struct V1PeriodStreamPeriodListParams {
    /// Limit the number of returned items
    pub limit: Option<i32>,
    /// The iterator returned from a prior invocation
    pub iterator: Option<String>,
    /// The sorting order of the returned items
    pub order: Option<Ordering>
}

/// struct for passing parameters to the method [`v1_period_stream_period_patch`]
#[derive(Clone, Debug)]
pub struct V1PeriodStreamPeriodPatchParams {
    pub stream_id: String,
    pub stream_patch: models::StreamPatch
}

/// struct for passing parameters to the method [`v1_period_stream_period_update`]
#[derive(Clone, Debug)]
pub struct V1PeriodStreamPeriodUpdateParams {
    pub stream_id: String,
    pub stream_in: models::StreamIn
}


/// struct for typed errors of method [`v1_period_stream_period_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStreamPeriodCreateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_stream_period_create_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStreamPeriodCreateEventsError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_stream_period_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStreamPeriodDeleteError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_stream_period_events_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStreamPeriodEventsGetError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_stream_period_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStreamPeriodGetError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_stream_period_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStreamPeriodListError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_stream_period_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStreamPeriodPatchError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_stream_period_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStreamPeriodUpdateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}


/// Creates a new stream.
pub async fn v1_period_stream_period_create(configuration: &Configuration, params: V1PeriodStreamPeriodCreateParams) -> Result<models::StreamOut, Error> {
    // unbox the parameters
    let stream_in = params.stream_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/stream".to_string())
    ;
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(stream_in);

    req.execute(configuration).await
}

/// Creates events on the Stream.
pub async fn v1_period_stream_period_create_events(configuration: &Configuration, params: V1PeriodStreamPeriodCreateEventsParams) -> Result<serde_json::Value, Error> {
    // unbox the parameters
    let stream_id = params.stream_id;
    let create_stream_in = params.create_stream_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/stream/{stream_id}/events".to_string())
    ;
    req = req.with_path_param("stream_id".to_string(), stream_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(create_stream_in);

    req.execute(configuration).await
}

/// Delete a stream.
pub async fn v1_period_stream_period_delete(configuration: &Configuration, params: V1PeriodStreamPeriodDeleteParams) -> Result<(), Error> {
    // unbox the parameters
    let stream_id = params.stream_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::DELETE, "/api/v1/stream/{stream_id}".to_string())
    ;
    req = req.with_path_param("stream_id".to_string(), stream_id.to_string());
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Iterate over a stream of events.
pub async fn v1_period_stream_period_events_get(configuration: &Configuration, params: V1PeriodStreamPeriodEventsGetParams) -> Result<models::EventStreamOut, Error> {
    // unbox the parameters
    let stream_id = params.stream_id;
    let limit = params.limit;
    let iterator = params.iterator;
    let after = params.after;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/stream/{stream_id}/events".to_string())
    ;
    if let Some(ref s) = limit {
        let query_value = s.to_string();
        req = req.with_query_param("limit".to_string(), query_value);
    }
    if let Some(ref s) = iterator {
        let query_value = s.to_string();
        req = req.with_query_param("iterator".to_string(), query_value);
    }
    if let Some(ref s) = after {
        let query_value = s.to_string();
        req = req.with_query_param("after".to_string(), query_value);
    }
    req = req.with_path_param("stream_id".to_string(), stream_id.to_string());

    req.execute(configuration).await
}

/// Get a stream by id or uid.
pub async fn v1_period_stream_period_get(configuration: &Configuration, params: V1PeriodStreamPeriodGetParams) -> Result<models::StreamOut, Error> {
    // unbox the parameters
    let stream_id = params.stream_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/stream/{stream_id}".to_string())
    ;
    req = req.with_path_param("stream_id".to_string(), stream_id.to_string());

    req.execute(configuration).await
}

/// List of all the organization's streams.
pub async fn v1_period_stream_period_list(configuration: &Configuration, params: V1PeriodStreamPeriodListParams) -> Result<models::ListResponseStreamOut, Error> {
    // unbox the parameters
    let limit = params.limit;
    let iterator = params.iterator;
    let order = params.order;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/stream".to_string())
    ;
    if let Some(ref s) = limit {
        let query_value = s.to_string();
        req = req.with_query_param("limit".to_string(), query_value);
    }
    if let Some(ref s) = iterator {
        let query_value = s.to_string();
        req = req.with_query_param("iterator".to_string(), query_value);
    }
    if let Some(ref s) = order {
        let query_value = s.to_string();
        req = req.with_query_param("order".to_string(), query_value);
    }

    req.execute(configuration).await
}

/// Partially update a stream.
pub async fn v1_period_stream_period_patch(configuration: &Configuration, params: V1PeriodStreamPeriodPatchParams) -> Result<models::StreamOut, Error> {
    // unbox the parameters
    let stream_id = params.stream_id;
    let stream_patch = params.stream_patch;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PATCH, "/api/v1/stream/{stream_id}".to_string())
    ;
    req = req.with_path_param("stream_id".to_string(), stream_id.to_string());
    req = req.with_body_param(stream_patch);

    req.execute(configuration).await
}

/// Update a stream.
pub async fn v1_period_stream_period_update(configuration: &Configuration, params: V1PeriodStreamPeriodUpdateParams) -> Result<models::StreamOut, Error> {
    // unbox the parameters
    let stream_id = params.stream_id;
    let stream_in = params.stream_in;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PUT, "/api/v1/stream/{stream_id}".to_string())
    ;
    req = req.with_path_param("stream_id".to_string(), stream_id.to_string());
    req = req.with_body_param(stream_in);

    req.execute(configuration).await
}


/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use crate::Configuration;
use crate::models;
use crate::error::Error;
#[allow(unused_imports)]
use crate::models::*;

/// struct for passing parameters to the method [`v1_period_statistics_period_aggregate_app_stats`]
#[derive(Clone, Debug)]
pub struct V1PeriodStatisticsPeriodAggregateAppStatsParams {
    pub app_usage_stats_in: models::AppUsageStatsIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_stats_period_app_attempts`]
#[derive(Clone, Debug)]
pub struct V1PeriodStatsPeriodAppAttemptsParams {
    /// The app's ID or UID
    pub app_id: String,
    /// Filter the range to data starting from this date.
    pub start_date: Option<String>,
    /// Filter the range to data ending by this date.
    pub end_date: Option<String>
}

/// struct for passing parameters to the method [`v1_period_stats_period_endpoint_attempts`]
#[derive(Clone, Debug)]
pub struct V1PeriodStatsPeriodEndpointAttemptsParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The ep's ID or UID
    pub endpoint_id: String,
    /// Filter the range to data starting from this date.
    pub start_date: Option<String>,
    /// Filter the range to data ending by this date.
    pub end_date: Option<String>
}


/// struct for typed errors of method [`v1_period_statistics_period_aggregate_app_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStatisticsPeriodAggregateAppStatsError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_statistics_period_aggregate_event_types`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStatisticsPeriodAggregateEventTypesError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_stats_period_app_attempts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStatsPeriodAppAttemptsError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_stats_period_endpoint_attempts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodStatsPeriodEndpointAttemptsError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}


/// Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.
pub async fn v1_period_statistics_period_aggregate_app_stats(configuration: &Configuration, params: V1PeriodStatisticsPeriodAggregateAppStatsParams) -> Result<models::AppUsageStatsOut, Error> {
    // unbox the parameters
    let app_usage_stats_in = params.app_usage_stats_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/stats/usage/app".to_string())
    ;
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(app_usage_stats_in);

    req.execute(configuration).await
}

/// Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.
pub async fn v1_period_statistics_period_aggregate_event_types(configuration: &Configuration) -> Result<models::AggregateEventTypesOut, Error> {
    // unbox the parameters


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PUT, "/api/v1/stats/usage/event-types".to_string())
    ;

    req.execute(configuration).await
}

/// Returns application-level statistics on message attempts
pub async fn v1_period_stats_period_app_attempts(configuration: &Configuration, params: V1PeriodStatsPeriodAppAttemptsParams) -> Result<models::AttemptStatisticsResponse, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let start_date = params.start_date;
    let end_date = params.end_date;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/stats/app/{app_id}/attempt".to_string())
    ;
    if let Some(ref s) = start_date {
        let query_value = s.to_string();
        req = req.with_query_param("startDate".to_string(), query_value);
    }
    if let Some(ref s) = end_date {
        let query_value = s.to_string();
        req = req.with_query_param("endDate".to_string(), query_value);
    }
    req = req.with_path_param("app_id".to_string(), app_id.to_string());

    req.execute(configuration).await
}

/// Returns endpoint-level statistics on message attempts.
pub async fn v1_period_stats_period_endpoint_attempts(configuration: &Configuration, params: V1PeriodStatsPeriodEndpointAttemptsParams) -> Result<models::AttemptStatisticsResponse, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let endpoint_id = params.endpoint_id;
    let start_date = params.start_date;
    let end_date = params.end_date;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt".to_string())
    ;
    if let Some(ref s) = start_date {
        let query_value = s.to_string();
        req = req.with_query_param("startDate".to_string(), query_value);
    }
    if let Some(ref s) = end_date {
        let query_value = s.to_string();
        req = req.with_query_param("endDate".to_string(), query_value);
    }
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("endpoint_id".to_string(), endpoint_id.to_string());

    req.execute(configuration).await
}


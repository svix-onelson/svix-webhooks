/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use crate::Configuration;
use crate::models;
use crate::error::Error;
#[allow(unused_imports)]
use crate::models::*;

/// struct for passing parameters to the method [`v1_period_integration_period_create`]
#[derive(Clone, Debug)]
pub struct V1PeriodIntegrationPeriodCreateParams {
    /// The app's ID or UID
    pub app_id: String,
    pub integration_in: models::IntegrationIn,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_integration_period_delete`]
#[derive(Clone, Debug)]
pub struct V1PeriodIntegrationPeriodDeleteParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The integ's ID
    pub integ_id: String
}

/// struct for passing parameters to the method [`v1_period_integration_period_get`]
#[derive(Clone, Debug)]
pub struct V1PeriodIntegrationPeriodGetParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The integ's ID
    pub integ_id: String
}

/// struct for passing parameters to the method [`v1_period_integration_period_get_key`]
#[derive(Clone, Debug)]
pub struct V1PeriodIntegrationPeriodGetKeyParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The integ's ID
    pub integ_id: String
}

/// struct for passing parameters to the method [`v1_period_integration_period_list`]
#[derive(Clone, Debug)]
pub struct V1PeriodIntegrationPeriodListParams {
    /// The app's ID or UID
    pub app_id: String,
    /// Limit the number of returned items
    pub limit: Option<i32>,
    /// The iterator returned from a prior invocation
    pub iterator: Option<String>,
    /// The sorting order of the returned items
    pub order: Option<Ordering>
}

/// struct for passing parameters to the method [`v1_period_integration_period_rotate_key`]
#[derive(Clone, Debug)]
pub struct V1PeriodIntegrationPeriodRotateKeyParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The integ's ID
    pub integ_id: String,
    /// The request's idempotency key
    pub idempotency_key: Option<String>
}

/// struct for passing parameters to the method [`v1_period_integration_period_update`]
#[derive(Clone, Debug)]
pub struct V1PeriodIntegrationPeriodUpdateParams {
    /// The app's ID or UID
    pub app_id: String,
    /// The integ's ID
    pub integ_id: String,
    pub integration_update: models::IntegrationUpdate
}


/// struct for typed errors of method [`v1_period_integration_period_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodIntegrationPeriodCreateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_integration_period_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodIntegrationPeriodDeleteError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_integration_period_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodIntegrationPeriodGetError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_integration_period_get_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodIntegrationPeriodGetKeyError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_integration_period_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodIntegrationPeriodListError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_integration_period_rotate_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodIntegrationPeriodRotateKeyError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_period_integration_period_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1PeriodIntegrationPeriodUpdateError {
    Status400(models::HttpErrorOut),
    Status401(models::HttpErrorOut),
    Status403(models::HttpErrorOut),
    Status404(models::HttpErrorOut),
    Status409(models::HttpErrorOut),
    Status422(models::HttpValidationError),
    Status429(models::HttpErrorOut),
    UnknownValue(serde_json::Value),
}


/// Create an integration.
pub async fn v1_period_integration_period_create(configuration: &Configuration, params: V1PeriodIntegrationPeriodCreateParams) -> Result<models::IntegrationOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let integration_in = params.integration_in;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/app/{app_id}/integration".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }
    req = req.with_body_param(integration_in);

    req.execute(configuration).await
}

/// Delete an integration.
pub async fn v1_period_integration_period_delete(configuration: &Configuration, params: V1PeriodIntegrationPeriodDeleteParams) -> Result<(), Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let integ_id = params.integ_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::DELETE, "/api/v1/app/{app_id}/integration/{integ_id}".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("integ_id".to_string(), integ_id.to_string());
    req = req.returns_nothing();

    req.execute(configuration).await
}

/// Get an integration.
pub async fn v1_period_integration_period_get(configuration: &Configuration, params: V1PeriodIntegrationPeriodGetParams) -> Result<models::IntegrationOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let integ_id = params.integ_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/integration/{integ_id}".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("integ_id".to_string(), integ_id.to_string());

    req.execute(configuration).await
}

/// Get an integration's key.
pub async fn v1_period_integration_period_get_key(configuration: &Configuration, params: V1PeriodIntegrationPeriodGetKeyParams) -> Result<models::IntegrationKeyOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let integ_id = params.integ_id;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/integration/{integ_id}/key".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("integ_id".to_string(), integ_id.to_string());

    req.execute(configuration).await
}

/// List the application's integrations.
pub async fn v1_period_integration_period_list(configuration: &Configuration, params: V1PeriodIntegrationPeriodListParams) -> Result<models::ListResponseIntegrationOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let limit = params.limit;
    let iterator = params.iterator;
    let order = params.order;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::GET, "/api/v1/app/{app_id}/integration".to_string())
    ;
    if let Some(ref s) = limit {
        let query_value = s.to_string();
        req = req.with_query_param("limit".to_string(), query_value);
    }
    if let Some(ref s) = iterator {
        let query_value = s.to_string();
        req = req.with_query_param("iterator".to_string(), query_value);
    }
    if let Some(ref s) = order {
        let query_value = s.to_string();
        req = req.with_query_param("order".to_string(), query_value);
    }
    req = req.with_path_param("app_id".to_string(), app_id.to_string());

    req.execute(configuration).await
}

/// Rotate the integration's key. The previous key will be immediately revoked.
pub async fn v1_period_integration_period_rotate_key(configuration: &Configuration, params: V1PeriodIntegrationPeriodRotateKeyParams) -> Result<models::IntegrationKeyOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let integ_id = params.integ_id;
    let idempotency_key = params.idempotency_key;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::POST, "/api/v1/app/{app_id}/integration/{integ_id}/key/rotate".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("integ_id".to_string(), integ_id.to_string());
    if let Some(param_value) = idempotency_key {
        req = req.with_header_param("idempotency-key".to_string(), param_value.to_string());
    }

    req.execute(configuration).await
}

/// Update an integration.
pub async fn v1_period_integration_period_update(configuration: &Configuration, params: V1PeriodIntegrationPeriodUpdateParams) -> Result<models::IntegrationOut, Error> {
    // unbox the parameters
    let app_id = params.app_id;
    let integ_id = params.integ_id;
    let integration_update = params.integration_update;


    #[allow(unused_mut)]
    let mut req = crate::request::Request::new(http1::Method::PUT, "/api/v1/app/{app_id}/integration/{integ_id}".to_string())
    ;
    req = req.with_path_param("app_id".to_string(), app_id.to_string());
    req = req.with_path_param("integ_id".to_string(), integ_id.to_string());
    req = req.with_body_param(integration_update);

    req.execute(configuration).await
}

